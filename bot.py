# bot.py
import asyncio
import logging
import re # –î–æ–¥–∞–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import selectinload

from db import Session, Item, User, CartItem 

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø (–û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ê–ú–Ü–ù–ò–¢–ò!) ---
TOKEN = "8203607429:AAHKBIUubmldST188Ejtcl5zpth2WVEKmsc" 
ADMIN_ID = 7249241490
CURRENCY = " –≥—Ä–Ω" 

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()
# ----------------------------------------------

# --- –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø ---
def escape_markdown(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î —Å–∏–º–≤–æ–ª–∏ MarkdownV2, —â–æ–± –≤–æ–Ω–∏ –Ω–µ –ª–∞–º–∞–ª–∏ —Ç–µ–∫—Å—Ç –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏."""
    # –°–∏–º–≤–æ–ª–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –≤ MarkdownV2
    # https://core.telegram.org/bots/api#markdownv2-style
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- FSM (FINITE STATE MACHINE) ---

class AddItem(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    waiting_for_name = State()       
    waiting_for_category = State()   
    waiting_for_price = State()      
    waiting_for_description = State()

class Checkout(StatesGroup):
    """–°—Ç–∞–Ω –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    waiting_for_confirmation = State() 

# --- –°–¢–í–û–†–ï–ù–ù–Ø –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ---
def get_main_menu_keyboard():
    """–°—Ç–≤–æ—Ä—é—î Inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥ –¢–æ–≤–∞—Ä—ñ–≤", callback_data="show_catalog"))
    builder.row(types.InlineKeyboardButton(text="üõçÔ∏è –ú—ñ–π –ö–æ—à–∏–∫", callback_data="show_cart"))
    builder.row(types.InlineKeyboardButton(text="‚öôÔ∏è –ó–≤'—è–∑–æ–∫ –∑ –ê–¥–º—ñ–Ω–æ–º", callback_data="contact_admin"))
    return builder.as_markup()

# --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î ---
@dp.message(Command("start", "menu"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /menu"""
    await state.clear()
    
    session = Session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user:
        new_user = User(
            telegram_id=message.from_user.id, 
            username=message.from_user.username or 'N/A'
        )
        session.add(new_user)
        session.commit()
    session.close()

    await message.answer(
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, **{message.from_user.first_name}**, –¥–æ **METRO SHOP**! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )

# ----------------------------------------------------------------------
#                         –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ (–î–û–î–ê–í–ê–ù–ù–Ø –¢–û–í–ê–†–£)
# ----------------------------------------------------------------------

@dp.message(Command("additem"))
async def cmd_add_item(message: types.Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    await state.clear()
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–ö—Ä–æ–∫ 1/4)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **–ø–æ–≤–Ω—É –Ω–∞–∑–≤—É** —Ç–æ–≤–∞—Ä—É (–µ–º–æ–¥–∑—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ!):", # –î–æ–¥–∞–Ω–æ –ø—ñ–¥–∫–∞–∑–∫—É
        parse_mode="Markdown"
    )
    await state.set_state(AddItem.waiting_for_name)

@dp.message(AddItem.waiting_for_name)
async def process_item_name(message: types.Message, state: FSMContext):
    """–û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É —ñ –ø—Ä–æ—Å–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤—É –∑ –µ–º–æ–¥–∑—ñ."""
    await state.update_data(name=message.text.strip())
    
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–ö—Ä–æ–∫ 2/4)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **–∫–∞—Ç–µ–≥–æ—Ä—ñ—é** —Ç–æ–≤–∞—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ó–±—Ä–æ—è', '–ë—Ä–æ–Ω—è', '–°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è' - –µ–º–æ–¥–∑—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ!):",
        parse_mode="Markdown"
    )
    await state.set_state(AddItem.waiting_for_category)

@dp.message(AddItem.waiting_for_category)
async def process_item_category(message: types.Message, state: FSMContext):
    """–û—Ç—Ä–∏–º—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —ñ –ø—Ä–æ—Å–∏—Ç—å —Ü—ñ–Ω—É"""
    await state.update_data(category=message.text.strip())
    
    await message.answer(
        f"**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–ö—Ä–æ–∫ 3/4)**\n"
        f"–í–≤–µ–¥—ñ—Ç—å **—Ü—ñ–Ω—É** —Ç–æ–≤–∞—Ä—É –≤ {CURRENCY.strip()} (–ª–∏—à–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2500):",
        parse_mode="Markdown"
    )
    await state.set_state(AddItem.waiting_for_price)

@dp.message(AddItem.waiting_for_price)
async def process_item_price(message: types.Message, state: FSMContext):
    """–û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω—É —ñ –ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å"""
    try:
        price = int(message.text.strip())
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏.")
        return

    await state.update_data(price=price)
    
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–ö—Ä–æ–∫ 4/4)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å** —Ç–æ–≤–∞—Ä—É (–µ–º–æ–¥–∑—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ! –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ù—ñ'):",
        parse_mode="Markdown"
    )
    await state.set_state(AddItem.waiting_for_description)

@dp.message(AddItem.waiting_for_description)
async def process_item_description(message: types.Message, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ–ø–∏—Å —ñ –¥–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ –ë–î"""
    data = await state.get_data()
    description = message.text.strip()
    
    if description.lower() == '–Ω—ñ':
        description = None

    session = Session()
    try:
        new_item = Item(
            name=data['name'],
            category=data['category'],
            price=data['price'],
            description=description,
            is_available=True,
            image_link=None 
        )
        session.add(new_item)
        session.commit()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä **'{escape_markdown(data['name'])}'** —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É!\n" # <<< –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø ESCAPE
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {escape_markdown(data['category'])}, –¶—ñ–Ω–∞: {data['price']}{CURRENCY}.", # <<< –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø ESCAPE
            parse_mode="MarkdownV2" # –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û MARKDOWNV2 –î–õ–Ø –ö–†–ê–©–û–á –û–ë–†–û–ë–ö–ò –ï–ú–û–î–ó–Ü
        )
    except IntegrityError:
        session.rollback()
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")
    except Exception as e:
        session.rollback()
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}")
        await message.answer(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        session.close()
        await state.clear()
        
# ----------------------------------------------------------------------
#                         –ó–ê–ì–ê–õ–¨–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò –¢–ê –ö–û–®–ò–ö
# ----------------------------------------------------------------------

@dp.callback_query(F.data == "show_catalog")
async def show_categories(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤"""
    session = Session()
    categories = session.query(Item.category).distinct().all()
    session.close()
    
    builder = InlineKeyboardBuilder()
    
    for (cat,) in categories:
        builder.row(types.InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}"))
    
    builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("cat_"))
async def show_items_by_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫–Ω–æ–ø–∫–∞–º–∏ '–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞'"""
    
    category = callback.data.split("_")[1]
    
    session = Session()
    items = session.query(Item).filter_by(category=category, is_available=True).all()
    session.close()

    if not items:
        await callback.answer("–£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.", show_alert=True)
        return

    # –ï–∫—Ä–∞–Ω—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
    text = f"**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {escape_markdown(category)}**\n\n"
    builder = InlineKeyboardBuilder()
    
    for item in items:
        # –ï–∫—Ä–∞–Ω—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É
        item_name_escaped = escape_markdown(item.name)
        item_desc_escaped = escape_markdown(item.description or '–ù–µ–º–∞—î –æ–ø–∏—Å—É')
        
        text += f"**{item_name_escaped}**\n"
        text += f"üí∞ –¶—ñ–Ω–∞: {item.price}{CURRENCY}\n"
        text += f"\_–û–ø–∏—Å:\_ {item_desc_escaped}\n\n"
        
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚ûï –î–æ–¥–∞—Ç–∏ {item_name_escaped}", 
                callback_data=f"add_{item.id}"
            )
        )
    
    builder.row(types.InlineKeyboardButton(text="üîô –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="show_catalog"))
    
    await callback.message.edit_text(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2" # –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û MARKDOWNV2
    )
    await callback.answer()


@dp.callback_query(F.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤–º—ñ—Å—Ç –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø EAGER LOADING."""
    user_tg_id = callback.from_user.id
    session = Session()
    
    cart_items = session.query(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item)).all()
    session.close() 
    
    text = f"**üõçÔ∏è –í–∞—à –ö–æ—à–∏–∫ \(Metro Shop\):**\n\n" # –ï–∫—Ä–∞–Ω—É—î–º–æ –¥—É–∂–∫–∏
    builder = InlineKeyboardBuilder()
    total_price = 0
    
    if not cart_items:
        text += "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\. –ß–∞—Å —â–æ—Å—å –æ–±—Ä–∞—Ç–∏\! üõí"
        builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="show_catalog"))
    else:
        for cart_item in cart_items:
            item = cart_item.item
            
            if item:
                item_subtotal = item.price * cart_item.quantity
                total_price += item_subtotal
                
                # –ï–∫—Ä–∞–Ω—É—î–º–æ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É
                text += f"\*{escape_markdown(item.name)}\* \(x{cart_item.quantity}\)\n"
                text += f"üí∞ {item_subtotal}{escape_markdown(CURRENCY)}\n"
                
                # ... (—ñ–Ω—à–∏–π –∫–æ–¥)
                text += "\‚Äî \‚Äî \‚Äî \‚Äî \‚Äî \‚Äî \n"

        text += f"\n**üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price}{escape_markdown(CURRENCY)}**"
        
        # ... (–∫–Ω–æ–ø–∫–∏ –¥—ñ–π)

    await callback.message.edit_text(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2" # –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û MARKDOWNV2
    )
    await callback.answer()


# ... (–æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è MarkdownV2)

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥—è—á–∏ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    user_tg_id = callback.from_user.id
    session = Session()
    
    cart_items = session.query(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item)).all()
    session.close()

    if not cart_items:
        await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º.", show_alert=True)
        return
    
    total_price = sum(cart_item.item.price * cart_item.quantity for cart_item in cart_items if cart_item.item)

    order_details = "\n\n**üõí –¢–æ–≤–∞—Ä–∏:**\n"
    for cart_item in cart_items:
        item = cart_item.item
        if item:
            item_name_escaped = escape_markdown(item.name)
            order_details += f"  - {item_name_escaped} x{cart_item.quantity} \({item.price * cart_item.quantity}{escape_markdown(CURRENCY)}\)\n"
    
    final_text = (
        "**‚úÖ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**\n"
        "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\.\n\n"
        f"**üí∏ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê:** {total_price}{escape_markdown(CURRENCY)}"
        f"{order_details}"
        "\n**\! –ó–í'–Ø–ó–û–ö:** –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram \(–∑–∞ –≤–∞—à–∏–º username\)\. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—ñ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π\."
    )

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úîÔ∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–∞ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_order"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–∞ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(
        final_text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2"
    )
    await state.set_state(Checkout.waiting_for_confirmation)
    await callback.answer()


@dp.callback_query(F.data == "confirm_order", Checkout.waiting_for_confirmation)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    """–§—ñ–Ω–∞–ª—ñ–∑—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —ñ –æ—á–∏—â–∞—î –∫–æ—à–∏–∫."""
    user_tg_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    session = Session()
    cart_items = session.query(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item)).all()
    
    total_price = sum(cart_item.item.price * cart_item.quantity for cart_item in cart_items if cart_item.item)

    order_details = "\n\n**üõí –¢–æ–≤–∞—Ä–∏:**\n"
    for cart_item in cart_items:
        item = cart_item.item
        if item:
            item_name_escaped = escape_markdown(item.name)
            order_details += f"  - {item_name_escaped} x{cart_item.quantity} \({item.price * cart_item.quantity}{escape_markdown(CURRENCY)}\)\n"
    
    admin_message = (
        f"üîî **–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\!**\n"
        f"----------------------------\n"
        f"**üßë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** @{escape_markdown(username)} \(ID: {user_tg_id}\)\n"
        f"**üí∏ –°–£–ú–ê:** {total_price}{escape_markdown(CURRENCY)}\n"
        f"{order_details}"
    )
    
    # 1. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(ADMIN_ID, admin_message, parse_mode="MarkdownV2")

    # ... (–û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É –±–µ–∑ –∑–º—ñ–Ω)
    session.query(CartItem).filter(CartItem.user_id == user_tg_id).delete()
    session.commit()
    session.close() 
    await state.clear()
    
    await callback.message.edit_text(
        "üéâ **–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û\!**\n"
        "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\. "
        f"–í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram \(\@**{escape_markdown(username)}**\) –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º\!\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ METRO SHOP\!",
        parse_mode="MarkdownV2",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
    )
    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")


# ----------------------------------------------------------------------
#                             –°–ï–ö–¶–Ü–Ø –ó–ê–ü–£–°–ö–£
# ----------------------------------------------------------------------

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —É —Ä–µ–∂–∏–º—ñ 24/7"""
    await bot.delete_webhook(drop_pending_updates=True) 
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ")