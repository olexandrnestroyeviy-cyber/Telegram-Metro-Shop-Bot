# bot.py - –§–Ü–ù–ê–õ–¨–ù–ê –í–ï–†–°–Ü–Ø –ó –ú–ï–ù–Æ, –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø–ú–ò –¢–ê –ì–†–û–Æ
import asyncio
import logging
import re 
import random
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.filters.text import Text # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select, update
from sqlalchemy.orm import selectinload
from sqlalchemy.exc import IntegrityError

# –í–∞—à —Ñ–∞–π–ª db.py –º–∞—î –±—É—Ç–∏ –ø–æ—Ä—É—á
from db import Session, Item, User, CartItem 

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø (–û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ê–ú–Ü–ù–ò–¢–ò!) ---
TOKEN = "8203607429:AAFyudKK3pCEPXu4SmC-Px7I5wmMCTSohw4" 
ADMIN_ID = 7249241490 # –í–∞—à Telegram ID
CURRENCY = " –≥—Ä–Ω" 
COOLDOWN_HOURS = 6 # –°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω —Ç—Ä–∏–≤–∞—î –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –≥—Ä–∏ "–ó–Ω–∞–π–¥–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()
# ----------------------------------------------

# --- –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø ---
def escape_markdown(text: str) -> str:
    """
    –ï–∫—Ä–∞–Ω—É—î —Å–∏–º–≤–æ–ª–∏ MarkdownV2.
    –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º—É –∑ \! (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ r-—Ä—è–¥–æ–∫).
    """
    # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤: \_ * [ ] ( ) ~ ` > # + - = | { } . !
    escape_chars = r'\_*[]()~`>#+-=|}{.!$'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- FSM (FINITE STATE MACHINE) ---

class AddItem(StatesGroup):
    waiting_for_name = State()       
    waiting_for_category = State()   
    waiting_for_price = State()      
    waiting_for_description = State()

class Checkout(StatesGroup):
    waiting_for_confirmation = State() 

# --- –°–¢–í–û–†–ï–ù–ù–Ø REPLY-–ö–õ–ê–í–Ü–ê–¢–£–† ---

def get_reply_keyboard(is_admin: bool = False):
    """–°—Ç–≤–æ—Ä—é—î Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    kb = [
        [types.KeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥ –¢–æ–≤–∞—Ä—ñ–≤"), types.KeyboardButton(text="üõçÔ∏è –ú—ñ–π –ö–æ—à–∏–∫")],
        [types.KeyboardButton(text="üî¶ –ó–Ω–∞–π–¥–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç"), types.KeyboardButton(text="‚öôÔ∏è –ó–≤'—è–∑–æ–∫ –∑ –ê–¥–º—ñ–Ω–æ–º")] # –î–û–î–ê–ù–û –ì–†–£
    ]
    if is_admin:
        kb.append([types.KeyboardButton(text="/additem")])
    
    return types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        selective=True
    )

def get_back_to_menu_inline():
    """–°—Ç–≤–æ—Ä—é—î Inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    return builder.as_markup()

# --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ê REPLY-–ú–ï–ù–Æ ---

@dp.message(Command("start", "menu"))
@dp.message(Text("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
async def cmd_start_or_menu(message: types.Message, state: FSMContext):
    await state.clear()
    
    session = Session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    is_admin = message.from_user.id == ADMIN_ID
    
    if not user:
        new_user = User(
            telegram_id=message.from_user.id, 
            username=message.from_user.username or 'N/A'
        )
        session.add(new_user)
        session.commit()
    session.close()

    user_name = escape_markdown(message.from_user.first_name)
    
    await message.answer(
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, **{user_name}**, –¥–æ **METRO SHOP**\! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
        reply_markup=get_reply_keyboard(is_admin), 
        parse_mode="MarkdownV2"
    )

@dp.callback_query(F.data == "main_menu_inline")
async def go_to_main_menu_inline(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î Inline-–∫–Ω–æ–ø–∫—É '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ Reply-–º–µ–Ω—é."""
    await state.clear() 
    await callback.message.edit_text(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
        parse_mode="MarkdownV2"
    )
    await callback.answer()
    await cmd_start_or_menu(callback.message, state) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Reply Keyboard

# ----------------------------------------------------------------------
#                         –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö –ú–ï–ù–Æ (Reply Keyboard)
# ----------------------------------------------------------------------

@dp.message(Text("üõí –ö–∞—Ç–∞–ª–æ–≥ –¢–æ–≤–∞—Ä—ñ–≤"))
async def handle_catalog_button(message: types.Message):
    await show_categories(message)

@dp.message(Text("üõçÔ∏è –ú—ñ–π –ö–æ—à–∏–∫"))
async def handle_cart_button(message: types.Message):
    await show_cart_message(message)

@dp.message(Text("‚öôÔ∏è –ó–≤'—è–∑–æ–∫ –∑ –ê–¥–º—ñ–Ω–æ–º"))
async def handle_contact_button(message: types.Message):
    await contact_admin_message(message)

# ----------------------------------------------------------------------
#                           ‚ú® –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ó–ù–ê–ô–î–ò –ê–†–¢–ï–§–ê–ö–¢! ‚ú®
# ----------------------------------------------------------------------

@dp.message(Text("üî¶ –ó–Ω–∞–π–¥–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç"))
async def find_artifact_game(message: types.Message):
    user_tg_id = message.from_user.id
    
    session = Session()
    user = session.query(User).filter_by(telegram_id=user_tg_id).first()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
    if user.last_game_time and datetime.now() < user.last_game_time + timedelta(hours=COOLDOWN_HOURS):
        next_try_time = user.last_game_time + timedelta(hours=COOLDOWN_HOURS)
        wait_time = next_try_time - datetime.now()
        
        hours = int(wait_time.total_seconds() // 3600)
        minutes = int((wait_time.total_seconds() % 3600) // 60)
        
        await message.answer(
            f"‚ùå **–ü–æ—à—É–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤ —â–µ –Ω–µ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∏–≤—Å—è\!**\n"
            f"–ó–∞–ª–∏—à–∏–ª–æ—Å—è: **{hours} –≥–æ–¥\. {minutes} —Ö–≤\.\**\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ—Å–ª—è {next_try_time.strftime('%H:%M')} \.",
            parse_mode="MarkdownV2"
        )
        session.close()
        return

    # 1. –ü–æ—à—É–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    available_items = session.query(Item).filter(Item.is_available == True).all()
    
    if not available_items:
        await message.answer("–°—Ö–æ–∂–µ, –≤—Å—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –≤–∂–µ —Ä–æ–∑—ñ–±—Ä–∞–Ω—ñ, –∞–±–æ –∫–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π\. –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ\.")
        session.close()
        return

    # 2. –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–®–∞–Ω—Å 1 –¥–æ 5)
    win_chance = 1
    if random.randint(1, 5) <= win_chance:
        # –ü–µ—Ä–µ–º–æ–≥–∞!
        won_item = random.choice(available_items)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å 1)
        cart_item = session.query(CartItem).filter(
            CartItem.user_id == user_tg_id, 
            CartItem.item_id == won_item.id
        ).first()

        if cart_item:
            cart_item.quantity += 1
        else:
            new_cart_item = CartItem(
                user_id=user_tg_id,
                item_id=won_item.id,
                quantity=1
            )
            session.add(new_cart_item)
            
        win_message = (
            f"üéâ **–£–°–ü–Ü–•\! –í–∏ –∑–Ω–∞–π—à–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç\!** üéâ\n"
            f"–í–∏ –Ω–∞—Ç—Ä–∞–ø–∏–ª–∏ –Ω–∞ —Ä—ñ–¥–∫—ñ—Å–Ω–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è: **{escape_markdown(won_item.name)}**\.\n"
            f"–í—ñ–Ω –±—É–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω–∏–π –¥–æ –≤–∞—à–æ–≥–æ –∫–æ—à–∏–∫–∞ \(`x{cart_item.quantity if cart_item else 1}`\)\!"
        )
    else:
        # –ü—Ä–æ–≥—Ä–∞—à
        win_message = "üòî **–ù–∞ –∂–∞–ª—å, —Ü—å–æ–≥–æ —Ä–∞–∑—É –≤–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –Ω—ñ—á–æ–≥–æ —Ü—ñ–Ω–Ω–æ–≥–æ\.\**\n–ü—Ä–æ—Ç–µ, –≤–∏ –ø–æ—á—É–ª–∏ –¥–∏–≤–Ω—ñ –∑–≤—É–∫–∏... –º–æ–∂–ª–∏–≤–æ, –≤–∞–º –ø–æ—â–∞—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É\!"

    # 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≥—Ä–∏
    stmt = update(User).where(User.telegram_id == user_tg_id).values(last_game_time=datetime.now())
    session.execute(stmt)
    session.commit()
    session.close()

    await message.answer(win_message, parse_mode="MarkdownV2")

# ----------------------------------------------------------------------
#                           –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ —Ç–∞ –ö–ê–¢–ê–õ–û–ì
# ----------------------------------------------------------------------

# ... (FSM-–æ–±—Ä–æ–±–Ω–∏–∫–∏ AddItem –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
@dp.message(Command("additem"))
async def cmd_add_item(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    # –õ–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É... (—Å–∫–æ—Ä–æ—á–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ —î —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—ñ)

@dp.message(AddItem.waiting_for_name)
async def process_item_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É \(–ö—Ä–æ–∫ 2/4\)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **–∫–∞—Ç–µ–≥–æ—Ä—ñ—é** —Ç–æ–≤–∞—Ä—É \(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ó–±—Ä–æ—è', '–ë—Ä–æ–Ω—è', '–°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è' \- –µ–º–æ–¥–∑—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ\!\):",
        parse_mode="MarkdownV2"
    )
    await state.set_state(AddItem.waiting_for_category)
# ... (–≤—Å—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ FSM-–æ–±—Ä–æ–±–Ω–∏–∫–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—É)

@dp.message(AddItem.waiting_for_description)
async def process_item_description(message: types.Message, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ–ø–∏—Å —ñ –¥–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ –ë–î"""
    data = await state.get_data()
    description = message.text.strip()
    
    if description.lower() == '–Ω—ñ':
        description = None

    session = Session()
    try:
        new_item = Item(
            name=data['name'],
            category=data['category'],
            price=data['price'],
            description=description,
            is_available=True,
            image_link=None 
        )
        session.add(new_item)
        session.commit()
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä **'{escape_markdown(data['name'])}'** —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É\!\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {escape_markdown(data['category'])}, –¶—ñ–Ω–∞: {data['price']}{escape_markdown(CURRENCY)}\.",
            parse_mode="MarkdownV2",
            reply_markup=get_reply_keyboard(True)
        )
    except IntegrityError:
        session.rollback()
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î\. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É\.")
    except Exception as e:
        session.rollback()
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\.")
    finally:
        session.close()
        await state.clear()


async def show_categories(message: types.Message):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ Message)"""
    session = Session()
    categories = session.execute(select(Item.category).distinct()).scalars().all()
    session.close()
    
    builder = InlineKeyboardBuilder()
    
    for cat in categories:
        builder.row(types.InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}"))
    
    builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("cat_"))
async def show_items_by_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫–Ω–æ–ø–∫–∞–º–∏ '–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞'"""
    
    category = callback.data.split("_")[1]
    
    session = Session()
    items = session.query(Item).filter_by(category=category, is_available=True).all()
    session.close()

    if not items:
        await callback.answer("–£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤\.", show_alert=True)
        return

    text = f"**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {escape_markdown(category)}**\n\n"
    builder = InlineKeyboardBuilder()
    
    for item in items:
        item_name_escaped = escape_markdown(item.name)
        item_desc_escaped = escape_markdown(item.description or '–ù–µ–º–∞—î –æ–ø–∏—Å—É')
        
        text += f"**{item_name_escaped}**\n"
        text += f"üí∞ –¶—ñ–Ω–∞: {item.price}{escape_markdown(CURRENCY)}\n"
        text += f"\_–û–ø–∏—Å:\_ {item_desc_escaped}\n\n"
        
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚ûï –î–æ–¥–∞—Ç–∏ {item_name_escaped}", 
                callback_data=f"add_{item.id}"
            )
        )
    
    builder.row(types.InlineKeyboardButton(text="üîô –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="show_catalog_callback"))
    
    await callback.message.edit_text(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2"
    )
    await callback.answer()

@dp.callback_query(F.data == "show_catalog_callback")
async def show_categories_callback(callback: types.CallbackQuery):
    await show_categories(callback.message)
    await callback.answer()

# ----------------------------------------------------------------------
#                             –ö–û–®–ò–ö —Ç–∞ –û–§–û–†–ú–õ–ï–ù–ù–Ø
# ----------------------------------------------------------------------

async def show_cart_message(message: types.Message):
    user_tg_id = message.from_user.id
    await _render_cart_content(user_tg_id, message.answer)

@dp.callback_query(F.data == "show_cart_callback")
async def show_cart_callback(callback: types.CallbackQuery):
    user_tg_id = callback.from_user.id
    await _render_cart_content(user_tg_id, callback.message.edit_text, callback.answer)


async def _render_cart_content(user_tg_id: int, send_or_edit_func, callback_answer=None):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –≤–º—ñ—Å—Ç—É –∫–æ—à–∏–∫–∞."""
    session = Session()
    cart_items = session.query(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item)).all()
    session.close() 
    
    text = f"**üõçÔ∏è –í–∞—à –ö–æ—à–∏–∫ \(Metro Shop\):**\n\n" 
    builder = InlineKeyboardBuilder()
    total_price = 0
    
    if not cart_items:
        text += "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\. –ß–∞—Å —â–æ—Å—å –æ–±—Ä–∞—Ç–∏\! üõí"
        builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="show_catalog_callback"))
        builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    else:
        for cart_item in cart_items:
            item = cart_item.item
            if item:
                item_subtotal = item.price * cart_item.quantity
                total_price += item_subtotal
                
                text += f"\*{escape_markdown(item.name)}\* \(x{cart_item.quantity}\)\n"
                text += f"üí∞ {item_subtotal}{escape_markdown(CURRENCY)}\n"
                
                builder.row(
                    types.InlineKeyboardButton(text="‚ûñ", callback_data=f"remove_one_{cart_item.id}"),
                    types.InlineKeyboardButton(text=f"x{cart_item.quantity}", callback_data="ignore"),
                    types.InlineKeyboardButton(text="‚ûï", callback_data=f"add_one_{cart_item.id}"),
                    types.InlineKeyboardButton(text="‚ùå", callback_data=f"delete_item_{cart_item.id}"),
                    width=4
                )
                
                text += "\‚Äî \‚Äî \‚Äî \‚Äî \‚Äî \‚Äî \n"

        text += f"\n**üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price}{escape_markdown(CURRENCY)}**"
        
        builder.row(types.InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout"))
        builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ö–æ—à–∏–∫", callback_data="clear_cart"))
        builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    await send_or_edit_func(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2" 
    )
    if callback_answer:
        await callback_answer()

@dp.callback_query(F.data.startswith("add_"))
async def add_item_to_cart(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—à–∏–∫–∞ (–∑ –∫–∞—Ç–∞–ª–æ–≥—É)."""
    try:
        item_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä—É\.", show_alert=True)
        return

    user_tg_id = callback.from_user.id
    
    session = Session()
    item = session.query(Item).filter_by(id=item_id).first()
    
    if not item:
        session.close()
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ\.", show_alert=True)
        return

    cart_item = session.query(CartItem).filter(
        CartItem.user_id == user_tg_id, 
        CartItem.item_id == item_id
    ).first()

    if cart_item:
        cart_item.quantity += 1
        message_text = f"‚ûï –î–æ–¥–∞–Ω–æ —â–µ –æ–¥–Ω—É –æ–¥–∏–Ω–∏—Ü—é {escape_markdown(item.name)}\! –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {cart_item.quantity}\."
    else:
        new_cart_item = CartItem(
            user_id=user_tg_id,
            item_id=item_id,
            quantity=1
        )
        session.add(new_cart_item)
        message_text = f"‚úÖ –¢–æ–≤–∞—Ä {escape_markdown(item.name)} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞\!"

    session.commit()
    session.close()
    
    await callback.answer(message_text, show_alert=True)


@dp.callback_query(F.data.startswith("add_one_"))
async def add_one_item_in_cart(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É ‚ûï —É –∫–æ—à–∏–∫—É (–í–ò–ü–†–ê–í–õ–ï–ù–û)."""
    cart_item_id = int(callback.data.split("_")[2])
    session = Session()
    cart_item = session.query(CartItem).filter_by(id=cart_item_id).options(selectinload(CartItem.item)).first()
    
    if cart_item:
        cart_item.quantity += 1
        session.commit()
        item_name = escape_markdown(cart_item.item.name)
        session.close()
        await callback.answer(f"‚ûï –ö—ñ–ª—å–∫—ñ—Å—Ç—å {item_name} –∑–±—ñ–ª—å—à–µ–Ω–æ –¥–æ {cart_item.quantity}\.", show_alert=True)
        await show_cart_callback(callback)
    else:
        session.close()
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ï–ª–µ–º–µ–Ω—Ç –∫–æ—à–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\.", show_alert=True)


@dp.callback_query(F.data.startswith("remove_one_") | F.data.startswith("delete_item_"))
async def remove_item_from_cart(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫–∏ ‚ûñ —Ç–∞ ‚ùå —É –∫–æ—à–∏–∫—É (–í–ò–ü–†–ê–í–õ–ï–ù–û)."""
    action, cart_item_id = callback.data.split("_", 2)
    cart_item_id = int(cart_item_id)
    
    session = Session()
    cart_item = session.query(CartItem).filter_by(id=cart_item_id).options(selectinload(CartItem.item)).first()
    
    if cart_item:
        item = cart_item.item
        item_name = escape_markdown(item.name) if item else "–¢–æ–≤–∞—Ä"
        action_text = ""
        
        if action == "delete_item":
            session.delete(cart_item)
            action_text = f"‚ùå {item_name} –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞\."
        
        elif action == "remove_one":
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                session.commit()
                action_text = f"‚ûñ –ö—ñ–ª—å–∫—ñ—Å—Ç—å {item_name} –∑–º–µ–Ω—à–µ–Ω–æ –¥–æ {cart_item.quantity}\."
            else:
                session.delete(cart_item)
                action_text = f"‚ùå {item_name} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞\."

        session.commit()
        session.close()
        
        await callback.answer(action_text, show_alert=True)
        await show_cart_callback(callback) 
    else:
        session.close()
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ï–ª–µ–º–µ–Ω—Ç –∫–æ—à–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\.", show_alert=True)


@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_tg_id = callback.from_user.id
    session = Session()
    
    session.query(CartItem).filter(CartItem.user_id == user_tg_id).delete()
    session.commit()
    session.close()
    
    await callback.answer("üóëÔ∏è –í–∞—à –∫–æ—à–∏–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ\!", show_alert=True)
    await show_cart_callback(callback)

# ----------------------------------------------------------------------
#                         –ó–í'–Ø–ó–û–ö –ó –ê–î–ú–Ü–ù–û–ú
# ----------------------------------------------------------------------

async def contact_admin_message(message: types.Message):
    admin_link = f"tg://user?id={ADMIN_ID}" 
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üí¨ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ê–¥–º—ñ–Ω–æ–º", url=admin_link))
    builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    await message.answer(
        "–ó —É—Å—ñ—Ö –ø–∏—Ç–∞–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\. " 
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —á–∞—Ç:",
        reply_markup=builder.as_markup(),
        parse_mode="MarkdownV2"
    )

# ----------------------------------------------------------------------
#                         –û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
# ----------------------------------------------------------------------

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    user_tg_id = callback.from_user.id
    session = Session()
    
    cart_items = session.query(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item)).all()
    session.close()

    if not cart_items:
        await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\! –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º\.", show_alert=True)
        return
    
    total_price = sum(cart_item.item.price * cart_item.quantity for cart_item in cart_items if cart_item.item)

    order_details = "\n\n**üõí –¢–æ–≤–∞—Ä–∏:**\n"
    for cart_item in cart_items:
        item = cart_item.item
        if item:
            item_name_escaped = escape_markdown(item.name)
            order_details += f"  - {item_name_escaped} x{cart_item.quantity} \({item.price * cart_item.quantity}{escape_markdown(CURRENCY)}\)\n"
    
    final_text = (
        "**‚úÖ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**\n"
        "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\.\n\n"
        f"**üí∏ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê:** {total_price}{escape_markdown(CURRENCY)}"
        f"{order_details}"
        "\n**\! –ó–í'–Ø–ó–û–ö:** –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram \(–∑–∞ –≤–∞—à–∏–º username\)\. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—ñ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π\."
    )

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úîÔ∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–∞ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_order"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–∞ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    await callback.message.edit_text(
        final_text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2"
    )
    await state.set_state(Checkout.waiting_for_confirmation)
    await callback.answer()

@dp.callback_query(F.data == "confirm_order", Checkout.waiting_for_confirmation)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_tg_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    session = Session()
    cart_items = session.query(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item)).all()
    
    total_price = sum(cart_item.item.price * cart_item.quantity for cart_item in cart_items if cart_item.item)

    order_details = "\n\n**üõí –¢–æ–≤–∞—Ä–∏:**\n"
    for cart_item in cart_items:
        item = cart_item.item
        if item:
            item_name_escaped = escape_markdown(item.name)
            order_details += f"  - {item_name_escaped} x{cart_item.quantity} \({item.price * cart_item.quantity}{escape_markdown(CURRENCY)}\)\n"
    
    admin_message = (
        f"üîî **–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\!**\n"
        f"----------------------------\n"
        f"**üßë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** \@{escape_markdown(username)} \\(ID: {user_tg_id}\\)\n"
        f"**üí∏ –°–£–ú–ê:** {total_price}{escape_markdown(CURRENCY)}\n"
        f"{order_details}"
    )
    
    # 1. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(ADMIN_ID, admin_message, parse_mode="MarkdownV2")

    # 2. –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ —Ç–∞ —Å—Ç–∞–Ω—É
    session.query(CartItem).filter(CartItem.user_id == user_tg_id).delete()
    session.commit()
    session.close() 
    await state.clear()
    
    # 3. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
    await callback.message.edit_text(
        r"üéâ **–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û\!**" + "\n" + # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ r-—Ä—è–¥–æ–∫
        "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\. "
        f"–í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram \(\@{escape_markdown(username)}\) –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º\!\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ METRO SHOP\!",
        parse_mode="MarkdownV2",
        reply_markup=get_back_to_menu_inline() 
    )
    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")

# ----------------------------------------------------------------------
#                             –°–ï–ö–¶–Ü–Ø –ó–ê–ü–£–°–ö–£
# ----------------------------------------------------------------------

async def main():
    await bot.delete_webhook(drop_pending_updates=True) 
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ")
