# bot.py - –§–Ü–ù–ê–õ–¨–ù–ê –ê–°–ò–ù–•–†–û–ù–ù–ê –í–ï–†–°–Ü–Ø (–¥–ª—è SQLAlchemy AsyncIO)
import asyncio
import logging
import re 
import random
# –í–ò–î–ê–õ–ï–ù–û: datetime —Ç–∞ timedelta –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ–º–∞—î COOLDOWN_HOURS
# from datetime import datetime, timedelta 

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
# –í–ò–î–ê–õ–ï–ù–û: –ù–µ–º–æ–∂–ª–∏–≤–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ Text. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ F.text
# from aiogram.filters.text import Text 
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select, update, delete
from sqlalchemy.orm import selectinload
from sqlalchemy.exc import IntegrityError

# –ó–ú–Ü–ù–ê: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
from db import AsyncSessionLocal, Item, User, CartItem, create_db, ASYNC_ENGINE

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø (–û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ê–ú–Ü–ù–ò–¢–ò!) ---
TOKEN = "8203607429:AAFyudKK3pCEPXu4SmC-Px7I5wmMCTSohw4" 
ADMIN_ID = 7249241490 # –í–∞—à Telegram ID
CURRENCY = " –≥—Ä–Ω" 

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()
# ----------------------------------------------

# --- –î–ê–ù–Ü –î–õ–Ø –ù–û–í–û–á –§–£–ù–ö–¶–Ü–á ---
JOKES = [
    "–ú–µ–Ω—ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–µ—Ä–∞–ø—ñ—è. –ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞... –ê–±–æ –∫–æ–¥, —è–∫–∏–π –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É.",
    "–©–æ —Å–∫–∞–∑–∞–≤ –Ω—É–ª—å –≤—ñ—Å—ñ–º—Ü—ñ? ‚Äì –ö–ª–∞—Å–Ω–∏–π –ø–∞—Å–æ–∫!",
    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–æ—Å—Ç—ñ–π–Ω–æ –ø–ª—É—Ç–∞—é—Ç—å –†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ–≤—ñ–Ω? –ë–æ $DEC 25$ –¥–æ—Ä—ñ–≤–Ω—é—î $OCT 31$.",
    "–Ø–∫–∏–π –Ω–∞–π—É–ª—é–±–ª–µ–Ω—ñ—à–∏–π –∞–ª–∫–æ–≥–æ–ª—å–Ω–∏–π –Ω–∞–ø—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∞? –†–æ–º (ROM).",
    "–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É, —â–æ–± –±—É—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–æ–º? –ù–∞ $4-8$ –ì–±.",
    "–ü—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É, –±–æ—Ç —Å–∫–∞–∑–∞–≤: '–Ø –ø—Ä–∞—Ü—é—é!' ‚Äì –Ü —Ü–µ –±—É–ª–∞ –π–æ–≥–æ –æ—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞.",
    "–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ —Ä—ñ—á —É —Ä–æ–±–æ—Ç—ñ: –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏ –≤–∏–º–∫–Ω—É–≤ –º—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–∞ –º—ñ—Ç–∏–Ω–≥—É.",
    "–ö—É–ø–∏–≤ —Å–æ–±—ñ –±–µ–∑–¥—Ä–æ—Ç–æ–≤—É –º–∏—à–∫—É... –∑–∞–±—É–≤, —â–æ –≤–æ–Ω–∞ –Ω–∞ –±–∞—Ç–∞—Ä–µ–π–∫–∞—Ö. –í—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–≤—ñ–¥–Ω–∞ –≤–∏–π—à–ª–∞.",
    "–ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥–æ–¥–æ–º—É, –¥—Ä—É–∂–∏–Ω–∞ –π–æ–º—É –∫–∞–∂–µ: '–°—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, –∫—É–ø–∏ –∫–æ–≤–±–∞—Å–∏. –Ø–∫—â–æ –±—É–¥—É—Ç—å —è–π—Ü—è, –∫—É–ø–∏ –¥–µ—Å—è—Ç–æ–∫'. –í—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑ –¥–µ—Å—è—Ç—å–º–∞ –∫–æ–≤–±–∞—Å–∞–º–∏. ‚Äì –ê —á–æ–º—É —Ç–∞–∫ –±–∞–≥–∞—Ç–æ? ‚Äì –Ø–π—Ü—è –±—É–ª–∏.",
]

# --- –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø ---
def escape_markdown(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î —Å–∏–º–≤–æ–ª–∏ MarkdownV2."""
    escape_chars = r'\_*[]()~`>#+-=|}{.!$'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- FSM (FINITE STATE MACHINE) ---

class AddItem(StatesGroup):
    waiting_for_name = State()       
    waiting_for_category = State()   
    waiting_for_price = State()      
    waiting_for_description = State()

class Checkout(StatesGroup):
    waiting_for_confirmation = State() 

# --- –°–¢–í–û–†–ï–ù–ù–Ø REPLY-–ö–õ–ê–í–Ü–ê–¢–£–† ---

def get_reply_keyboard(is_admin: bool = False):
    """–°—Ç–≤–æ—Ä—é—î Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    kb = [
        [types.KeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥ –¢–æ–≤–∞—Ä—ñ–≤"), types.KeyboardButton(text="üõçÔ∏è –ú—ñ–π –ö–æ—à–∏–∫")],
        # –ö–Ω–æ–ø–∫–∞ "üòÇ –†–∞–Ω–¥–æ–º–Ω–∏–π –ú–µ–º"
        [types.KeyboardButton(text="üòÇ –†–∞–Ω–¥–æ–º–Ω–∏–π –ú–µ–º"), types.KeyboardButton(text="‚öôÔ∏è –ó–≤'—è–∑–æ–∫ –∑ –ê–¥–º—ñ–Ω–æ–º")]
    ]
    if is_admin:
        kb.append([types.KeyboardButton(text="/additem")])
    
    return types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        selective=True
    )

def get_back_to_menu_inline():
    """–°—Ç–≤–æ—Ä—é—î Inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    return builder.as_markup()

# --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ê REPLY-–ú–ï–ù–Æ ---

@dp.message(Command("start", "menu"))
# –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ F.text –∑–∞–º—ñ—Å—Ç—å Text
@dp.message(F.text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def cmd_start_or_menu(message: types.Message, state: FSMContext):
    await state.clear()
    
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).filter_by(telegram_id=message.from_user.id))
        user = result.scalars().first()
        
        is_admin = message.from_user.id == ADMIN_ID
        
        if not user:
            # –ü–æ–ª–µ last_game_time –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ –º–æ–¥–µ–ª—ñ DB, –∞–ª–µ —Ç—É—Ç –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è.
            # –Ø–∫—â–æ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∑ db.py, —Ç—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è.
            new_user = User(
                telegram_id=message.from_user.id, 
                username=message.from_user.username or 'N/A'
            )
            session.add(new_user)
            await session.commit()
            
    user_name = escape_markdown(message.from_user.first_name)
    
    await message.answer(
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, **{user_name}**, –¥–æ **METRO SHOP**\\! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
        reply_markup=get_reply_keyboard(is_admin), 
        parse_mode="MarkdownV2"
    )

@dp.callback_query(F.data == "main_menu_inline")
async def go_to_main_menu_inline(callback: types.CallbackQuery, state: FSMContext):
    await state.clear() 
    await callback.message.edit_text(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\\. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
        parse_mode="MarkdownV2"
    )
    await callback.answer()
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ message –∑–∞–º—ñ—Å—Ç—å callback.message, —â–æ–± cmd_start_or_menu –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–∏–≤ –π–æ–≥–æ
    await cmd_start_or_menu(callback.message, state)

# ----------------------------------------------------------------------
#                         –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö –ú–ï–ù–Æ (Reply Keyboard)
# ----------------------------------------------------------------------
@dp.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥ –¢–æ–≤–∞—Ä—ñ–≤")
async def handle_catalog_button(message: types.Message):
    await show_categories(message)

@dp.message(F.text == "üõçÔ∏è –ú—ñ–π –ö–æ—à–∏–∫")
async def handle_cart_button(message: types.Message):
    await show_cart_message(message)

@dp.message(F.text == "‚öôÔ∏è –ó–≤'—è–∑–æ–∫ –∑ –ê–¥–º—ñ–Ω–æ–º")
async def handle_contact_button(message: types.Message):
    await contact_admin_message(message)

# ----------------------------------------------------------------------
#                           üòÇ –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –†–ê–ù–î–û–ú–ù–ò–ô –ú–ï–ú! üòÇ
# ----------------------------------------------------------------------

# –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ F.text –∑–∞–º—ñ—Å—Ç—å Text
@dp.message(F.text == "üòÇ –†–∞–Ω–¥–æ–º–Ω–∏–π –ú–µ–º")
async def send_random_joke(message: types.Message):
    """–ù–∞–¥—Å–∏–ª–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç-–∂–∞—Ä—Ç –∑—ñ —Å–ø–∏—Å–∫—É JOKES."""
    random_joke = random.choice(JOKES)
    
    await message.answer(
        f"üòÇ **–í–∞—à —Ä–∞–Ω–¥–æ–º–Ω–∏–π –º–µ–º \\(–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—Å—å–∫–∏–π\\):**\n"
        f"_{escape_markdown(random_joke)}_",
        parse_mode="MarkdownV2"
    )

# ----------------------------------------------------------------------
#                           –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ —Ç–∞ –ö–ê–¢–ê–õ–û–ì
# ----------------------------------------------------------------------

@dp.message(Command("additem"))
async def cmd_add_item(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        # –î–æ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –Ω–µ-–∞–¥–º—ñ–Ω—ñ–≤
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await state.set_state(AddItem.waiting_for_name)
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É \\(–ö—Ä–æ–∫ 1/4\\)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **–Ω–∞–∑–≤—É** —Ç–æ–≤–∞—Ä—É:", 
        parse_mode="MarkdownV2"
    )

@dp.message(AddItem.waiting_for_name)
async def process_item_name(message: types.Message, state: FSMContext):
    if not message.text or not message.text.strip():
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
        
    await state.update_data(name=message.text.strip())
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É \\(–ö—Ä–æ–∫ 2/4\\)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **–∫–∞—Ç–µ–≥–æ—Ä—ñ—é** —Ç–æ–≤–∞—Ä—É \\(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ó–±—Ä–æ—è', '–ë—Ä–æ–Ω—è', '–°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è' \\- –µ–º–æ–¥–∑—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ\\!\\):",
        parse_mode="MarkdownV2"
    )
    await state.set_state(AddItem.waiting_for_category)

@dp.message(AddItem.waiting_for_category)
async def process_item_category(message: types.Message, state: FSMContext):
    if not message.text or not message.text.strip():
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
        
    await state.update_data(category=message.text.strip())
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É \\(–ö—Ä–æ–∫ 3/4\\)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **—Ü—ñ–Ω—É** —Ç–æ–≤–∞—Ä—É \\(—Ü—ñ–ª–µ —á–∏—Å–ª–æ\\):", 
        parse_mode="MarkdownV2"
    )
    await state.set_state(AddItem.waiting_for_price)

@dp.message(AddItem.waiting_for_price)
async def process_item_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text.strip())
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É (—Ü—ñ–ª–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –Ω—É–ª—è).")
        return
    
    await state.update_data(price=price)
    await message.answer(
        "**‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É \\(–ö—Ä–æ–∫ 4/4\\)**\n"
        "–í–≤–µ–¥—ñ—Ç—å **–æ–ø–∏—Å** —Ç–æ–≤–∞—Ä—É \\(–∞–±–æ '–ù—ñ', —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏\\):",
        parse_mode="MarkdownV2"
    )
    await state.set_state(AddItem.waiting_for_description)

@dp.message(AddItem.waiting_for_description)
async def process_item_description(message: types.Message, state: FSMContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ–ø–∏—Å —ñ –¥–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ –ë–î"""
    data = await state.get_data()
    description = message.text.strip()
    
    if description.lower() == '–Ω—ñ':
        description = None

    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        try:
            new_item = Item(
                name=data['name'],
                category=data['category'],
                price=data['price'],
                description=description,
                is_available=True,
                image_link=None 
            )
            session.add(new_item)
            await session.commit()
            
            await message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä **'{escape_markdown(data['name'])}'** —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É\\!\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {escape_markdown(data['category'])}, –¶—ñ–Ω–∞: {data['price']}{escape_markdown(CURRENCY)}\\.",
                parse_mode="MarkdownV2",
                reply_markup=get_reply_keyboard(True)
            )
        except IntegrityError:
            await session.rollback()
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î\\. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É\\.")
        except Exception as e:
            await session.rollback()
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}")
            await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\\. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\.")
        finally:
            await state.clear()


async def show_categories(message: types.Message):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ Message)"""
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Item.category).distinct())
        categories = result.scalars().all()
    
    builder = InlineKeyboardBuilder()
    
    if not categories:
        # –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–∫—É –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É
        await message.answer(
            "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π\\! –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —â–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏\\.", 
            parse_mode="MarkdownV2",
            reply_markup=get_back_to_menu_inline()
        )
        return

    for cat in categories:
        builder.row(types.InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}"))
    
    builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("cat_"))
async def show_items_by_category(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫–Ω–æ–ø–∫–∞–º–∏ '–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞'"""
    
    category = callback.data.split("_")[1]
    
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        items_result = await session.execute(
            select(Item).filter_by(category=category, is_available=True)
        )
        items = items_result.scalars().all()

    if not items:
        await callback.answer("–£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤\\.", show_alert=True)
        return

    text = f"**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {escape_markdown(category)}**\n\n"
    builder = InlineKeyboardBuilder()
    
    for item in items:
        item_name_escaped = escape_markdown(item.name)
        # item_desc_escaped = escape_markdown(item.description or '–ù–µ–º–∞—î –æ–ø–∏—Å—É') # –í–∏–¥–∞–ª–µ–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
        
        text += f"**{item_name_escaped}**\n"
        text += f"üí∞ –¶—ñ–Ω–∞: {item.price}{escape_markdown(CURRENCY)}\n"
        text += f"\\_–û–ø–∏—Å:\\_ {escape_markdown(item.description or '–ù–µ–º–∞—î –æ–ø–∏—Å—É')}\n\n"
        
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚ûï –î–æ–¥–∞—Ç–∏ {item_name_escaped}", 
                callback_data=f"add_{item.id}"
            )
        )
    
    builder.row(types.InlineKeyboardButton(text="üîô –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="show_catalog_callback"))
    
    await callback.message.edit_text(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2"
    )
    await callback.answer()

@dp.callback_query(F.data == "show_catalog_callback")
async def show_categories_callback(callback: types.CallbackQuery):
    await show_categories(callback.message)
    await callback.answer()

# ----------------------------------------------------------------------
#                             –ö–û–®–ò–ö —Ç–∞ –û–§–û–†–ú–õ–ï–ù–ù–Ø
# ----------------------------------------------------------------------

async def show_cart_message(message: types.Message):
    user_tg_id = message.from_user.id
    await _render_cart_content(user_tg_id, message.answer)

@dp.callback_query(F.data == "show_cart_callback")
async def show_cart_callback(callback: types.CallbackQuery):
    user_tg_id = callback.from_user.id
    await _render_cart_content(user_tg_id, callback.message.edit_text, callback.answer)


async def _render_cart_content(user_tg_id: int, send_or_edit_func, callback_answer=None):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –≤–º—ñ—Å—Ç—É –∫–æ—à–∏–∫–∞."""
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        cart_result = await session.execute(
            select(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item))
        )
        cart_items = cart_result.scalars().all()
    
    text = f"**üõçÔ∏è –í–∞—à –ö–æ—à–∏–∫ \\(Metro Shop\\):**\n\n" 
    builder = InlineKeyboardBuilder()
    total_price = 0
    
    if not cart_items:
        text += "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\\. –ß–∞—Å —â–æ—Å—å –æ–±—Ä–∞—Ç–∏\\! üõí"
        builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –î–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="show_catalog_callback"))
        builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    else:
        for cart_item in cart_items:
            item = cart_item.item
            if item:
                item_subtotal = item.price * cart_item.quantity
                total_price += item_subtotal
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–∏—à–µ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
                text += f"\\*{escape_markdown(item.name)}\\* \\(x{cart_item.quantity}\\) \\- {item_subtotal}{escape_markdown(CURRENCY)}\n"
                
                builder.row(
                    types.InlineKeyboardButton(text="‚ûñ", callback_data=f"remove_one_{cart_item.id}"),
                    types.InlineKeyboardButton(text=f"x{cart_item.quantity}", callback_data="ignore"),
                    types.InlineKeyboardButton(text="‚ûï", callback_data=f"add_one_{cart_item.id}"),
                    types.InlineKeyboardButton(text="‚ùå", callback_data=f"delete_item_{cart_item.id}"),
                    width=4
                )
                
                text += "\\‚Äî \\‚Äî \\‚Äî \\‚Äî \\‚Äî \\‚Äî \n"

        text += f"\n**üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price}{escape_markdown(CURRENCY)}**"
        
        builder.row(types.InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout"))
        builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ö–æ—à–∏–∫", callback_data="clear_cart"))
        builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —î —Ü–µ message.answer —á–∏ message.edit_text
    if send_or_edit_func.__name__ == 'answer':
         await send_or_edit_func(
            text, 
            reply_markup=builder.as_markup(), 
            parse_mode="MarkdownV2" 
        )
    else:
         await send_or_edit_func(
            text, 
            reply_markup=builder.as_markup(), 
            parse_mode="MarkdownV2" 
        )
    
    if callback_answer:
        await callback_answer()

@dp.callback_query(F.data.startswith("add_"))
async def add_item_to_cart(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—à–∏–∫–∞ (–∑ –∫–∞—Ç–∞–ª–æ–≥—É)."""
    try:
        item_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä—É\\.", show_alert=True)
        return

    user_tg_id = callback.from_user.id
    
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        item_result = await session.execute(select(Item).filter_by(id=item_id))
        item = item_result.scalars().first()
        
        if not item or not item.is_available:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\\.", show_alert=True)
            return

        cart_result = await session.execute(select(CartItem).filter(
            CartItem.user_id == user_tg_id, 
            CartItem.item_id == item_id
        ))
        cart_item = cart_result.scalars().first()

        if cart_item:
            cart_item.quantity += 1
            message_text = f"‚ûï –î–æ–¥–∞–Ω–æ —â–µ –æ–¥–Ω—É –æ–¥–∏–Ω–∏—Ü—é {escape_markdown(item.name)}\\! –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {cart_item.quantity}\\."
        else:
            new_cart_item = CartItem(
                user_id=user_tg_id,
                item_id=item_id,
                quantity=1
            )
            session.add(new_cart_item)
            message_text = f"‚úÖ –¢–æ–≤–∞—Ä {escape_markdown(item.name)} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞\\!"

        await session.commit()
    
    await callback.answer(message_text, show_alert=True)


@dp.callback_query(F.data.startswith("add_one_"))
async def add_one_item_in_cart(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É ‚ûï —É –∫–æ—à–∏–∫—É."""
    cart_item_id = int(callback.data.split("_")[2])
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        cart_result = await session.execute(
            select(CartItem).filter_by(id=cart_item_id).options(selectinload(CartItem.item))
        )
        cart_item = cart_result.scalars().first()
        
        if cart_item:
            cart_item.quantity += 1
            await session.commit()
            item_name = escape_markdown(cart_item.item.name)
            
            await callback.answer(f"‚ûï –ö—ñ–ª—å–∫—ñ—Å—Ç—å {item_name} –∑–±—ñ–ª—å—à–µ–Ω–æ –¥–æ {cart_item.quantity}\\.", show_alert=True)
            # –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –∫–æ—à–∏–∫–∞
            await show_cart_callback(callback)
        else:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ï–ª–µ–º–µ–Ω—Ç –∫–æ—à–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\\.", show_alert=True)


@dp.callback_query(F.data.startswith("remove_one_") | F.data.startswith("delete_item_"))
async def remove_item_from_cart(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫–∏ ‚ûñ —Ç–∞ ‚ùå —É –∫–æ—à–∏–∫—É."""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è: action - remove/delete, item_id
    action, _, cart_item_id_str = callback.data.rpartition('_')
    cart_item_id = int(cart_item_id_str)
    
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .filter_by(id=...) –¥–ª—è –±—ñ–ª—å—à–æ—ó –±–µ–∑–ø–µ–∫–∏, –Ω—ñ–∂ –ø—Ä–æ—Å—Ç–æ —Ñ—ñ–ª—å—Ç—Ä
        cart_result = await session.execute(
            select(CartItem).filter_by(id=cart_item_id).options(selectinload(CartItem.item))
        )
        cart_item = cart_result.scalars().first()
        
        if cart_item:
            item = cart_item.item
            item_name = escape_markdown(item.name) if item else "–¢–æ–≤–∞—Ä"
            action_text = ""
            
            if action == "delete_item":
                await session.delete(cart_item)
                action_text = f"‚ùå {item_name} –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞\\."
            
            elif action == "remove_one":
                if cart_item.quantity > 1:
                    cart_item.quantity -= 1
                    action_text = f"‚ûñ –ö—ñ–ª—å–∫—ñ—Å—Ç—å {item_name} –∑–º–µ–Ω—à–µ–Ω–æ –¥–æ {cart_item.quantity}\\."
                else:
                    await session.delete(cart_item)
                    action_text = f"‚ùå {item_name} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞\\."

            await session.commit()
            
            await callback.answer(action_text, show_alert=True)
            # –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –∫–æ—à–∏–∫–∞
            await show_cart_callback(callback) 
        else:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ï–ª–µ–º–µ–Ω—Ç –∫–æ—à–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\\.", show_alert=True)


@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_tg_id = callback.from_user.id
    
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        await session.execute(delete(CartItem).filter(CartItem.user_id == user_tg_id))
        await session.commit()
    
    await callback.answer("üóëÔ∏è –í–∞—à –∫–æ—à–∏–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ\\!", show_alert=True)
    # –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –∫–æ—à–∏–∫–∞
    await show_cart_callback(callback)

# ----------------------------------------------------------------------
#                         –ó–í'–Ø–ó–û–ö –ó –ê–î–ú–Ü–ù–û–ú
# ----------------------------------------------------------------------

async def contact_admin_message(message: types.Message):
    admin_link = f"tg://user?id={ADMIN_ID}" 
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üí¨ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ê–¥–º—ñ–Ω–æ–º", url=admin_link))
    builder.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    await message.answer(
        "–ó —É—Å—ñ—Ö –ø–∏—Ç–∞–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\. " 
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —á–∞—Ç:",
        reply_markup=builder.as_markup(),
        parse_mode="MarkdownV2"
    )

# ----------------------------------------------------------------------
#                         –û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
# ----------------------------------------------------------------------

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    user_tg_id = callback.from_user.id
    
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        cart_result = await session.execute(
            select(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item))
        )
        cart_items = cart_result.scalars().all()

    if not cart_items:
        await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\\! –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º\\.", show_alert=True)
        return
    
    total_price = sum(cart_item.item.price * cart_item.quantity for cart_item in cart_items if cart_item.item)

    order_details = "\n\n**üõí –¢–æ–≤–∞—Ä–∏:**\n"
    for cart_item in cart_items:
        item = cart_item.item
        if item:
            item_name_escaped = escape_markdown(item.name)
            order_details += f"  - {item_name_escaped} x{cart_item.quantity} \\({item.price * cart_item.quantity}{escape_markdown(CURRENCY)}\\)\n"
    
    final_text = (
        "**‚úÖ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**\n"
        "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\\.\n\n"
        f"**üí∏ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê:** {total_price}{escape_markdown(CURRENCY)}"
        f"{order_details}"
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è @ —É Telegram
        "\n**\\! –ó–í'–Ø–ó–û–ö:** –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram \\(–∑–∞ –≤–∞—à–∏–º username\\)\\. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—ñ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π\\."
    )

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úîÔ∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–∞ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_order"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–∞ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu_inline"))
    
    await callback.message.edit_text(
        final_text, 
        reply_markup=builder.as_markup(), 
        parse_mode="MarkdownV2"
    )
    await state.set_state(Checkout.waiting_for_confirmation)
    await callback.answer()

@dp.callback_query(F.data == "confirm_order", Checkout.waiting_for_confirmation)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_tg_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    # –ó–ú–Ü–ù–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ –ë–î
    async with AsyncSessionLocal() as session:
        cart_result = await session.execute(
            select(CartItem).filter(CartItem.user_id == user_tg_id).options(selectinload(CartItem.item))
        )
        cart_items = cart_result.scalars().all()
        
        total_price = sum(cart_item.item.price * cart_item.quantity for cart_item in cart_items if cart_item.item)

        order_details = "\n\n**üõí –¢–æ–≤–∞—Ä–∏:**\n"
        for cart_item in cart_items:
            item = cart_item.item
            if item:
                item_name_escaped = escape_markdown(item.name)
                order_details += f"  - {item_name_escaped} x{cart_item.quantity} \\({item.price * cart_item.quantity}{escape_markdown(CURRENCY)}\\)\n"
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è @ —É f-—Ä—è–¥–∫—É –¥–ª—è Telegram
        admin_message = (
            f"üîî **–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\\!**\n"
            f"----------------------------\n"
            f"**üßë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** \\@{escape_markdown(username)} \\(ID: {user_tg_id}\\)\n"
            f"**üí∏ –°–£–ú–ê:** {total_price}{escape_markdown(CURRENCY)}\n"
            f"{order_details}"
        )
        
        # 1. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(ADMIN_ID, admin_message, parse_mode="MarkdownV2")

        # 2. –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ —Ç–∞ —Å—Ç–∞–Ω—É
        await session.execute(delete(CartItem).filter(CartItem.user_id == user_tg_id))
        await session.commit()
    
    await state.clear()
    
    # 3. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è @ —É f-—Ä—è–¥–∫—É –¥–ª—è Telegram
    await callback.message.edit_text(
        r"üéâ **–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û\\!**" + "\n" + 
        "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\\. "
        f"–í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram \\(\@?{escape_markdown(username)}\\) –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º\\!\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ METRO SHOP\\!",
        parse_mode="MarkdownV2",
        reply_markup=get_back_to_menu_inline() 
    )
    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")

# ----------------------------------------------------------------------
#                             –°–ï–ö–¶–Ü–Ø –ó–ê–ü–£–°–ö–£
# ----------------------------------------------------------------------

async def main():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await create_db() 
    await bot.delete_webhook(drop_pending_updates=True) 
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ")
